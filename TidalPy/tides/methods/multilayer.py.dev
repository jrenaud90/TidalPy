from .layered import LayeredTides
from ..multilayer import fundamental_matrix_orderl2, fundamental_matrix_generic, y_solver_matrix, y_solver_shooting

if TYPE_CHECKING:
    from ...structures.world_types import LayeredWorld
    from ...structures.layers import PhysicalLayerType


class LayeredLove(LayeredTides):
    """ LayeredLove
    Class used for layered planets (icy or rocky world_types)

    Utilizes shooting or propagation method to solve the viscoelastic-gravitational problem to find a planet's
        Love numbers and radial solutions ($y_{i}$).

    See Also
    --------
    TidalPy.tides.methods.LayeredTides
    """

    model = 'multilayer'
    default_config = tide_defaults['layered_love']

    def __init__(self, world: 'LayeredWorld', store_config_in_world: bool = True, initialize: bool = True):
        """ Constructor for LayeredLove class

        Parameters
        ----------
        world : TidalWorldType
            The world where tides are being calculated.
        store_config_in_world : bool = True
            Flag that determines if the final model's configuration dictionary should be copied into the
            `world.config` dictionary.
        initialize : bool = True
            If `True`, then an initial call to the tide's reinit method will be made at the end of construction.
        """

        super().__init__(world, store_config_in_world=store_config_in_world, initialize=initialize)

        self._solver_method = None

    def reinit(self, initial_init: bool = False):
        """ Load configurations into the Tides class and import any config-dependent functions.

        This reinit process is separate from the __init__ method because the Orbit class may need to overload some
            configurations after class initialization.

        Parameters
        ----------
        self
        initial_init : bool = False
            This should be set to True the first time reinit is called.
        """

        # Pull out tidal inputs
        for layer in self.world:
            if layer.is_tidal:
                tidal_scale = lambda: layer.tidal_scale
                # This system assumes that density, radius, and gravity will not change after initialization
                radius = lambda: layer.radius
                bulk_density = lambda: layer.density_bulk
                gravity_surf = lambda: layer.gravity_surface

                for param in [tidal_scale, radius, bulk_density, gravity_surf]:
                    if param is None:
                        # How did that happen?
                        raise BadAttributeValueError

                self._tidal_input_getters_by_layer[layer] = (tidal_scale, radius, bulk_density, gravity_surf)
            else:
                # Layer does not contribute to tides. This will be marked by a None in this list
                self._tidal_input_getters_by_layer[layer] = None

        # Pull out configurations
        self.

        # Pull out planet properties that may be used based on the configuration
        if self.config['use_planet_params_for_love_calc']:
            # TODO: These are used to calculate the effective rigidity. Should these be for the layer or for the planet
            #    as a whole?
            # TODO: Tidal scale for world? -> planet_tidal_scale = lambda: self.world.tidal
            world_radius = lambda: self.world.radius
            world_density = lambda: self.world.density_bulk
            world_gravity = lambda: self.world.gravity_surface
            self._world_tidal_input_getters = (world_radius, world_density, world_gravity)